name: Test and Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.13.1]

    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Check types
        run: npx tsc --noEmit

      - name: Test dashboard production build
        run: |
          # Start the dashboard server in the background, capturing output
          npm run dashboard:prod > dashboard.log 2>&1 &
          SERVER_PID=$!

          # Wait for server to start and detect the port (max 60 seconds)
          echo "Waiting for dashboard server to start..."
          PORT=""
          for i in {1..60}; do
            # Check if the log file contains the port information
            if [ -f dashboard.log ]; then
              # Extract port from "Dashboard auto-started at: http://localhost:XXXXX"
              PORT=$(grep -oP 'http://localhost:\K\d+' dashboard.log | head -1 || echo "")
              if [ -n "$PORT" ]; then
                # Test if the server is actually responding
                if curl -s -o /dev/null -w "%{http_code}" http://localhost:$PORT | grep -q "200"; then
                  echo "Dashboard server is running on port $PORT"
                  break
                fi
              fi
            fi
            if [ $i -eq 60 ]; then
              echo "Dashboard server failed to start"
              if [ -f dashboard.log ]; then
                echo "Dashboard logs:"
                cat dashboard.log
              fi
              kill $SERVER_PID 2>/dev/null || true
              exit 1
            fi
            sleep 1
          done

          # Verify the app is serving correctly
          RESPONSE=$(curl -s http://localhost:$PORT)
          if echo "$RESPONSE" | grep -q "<div id=\"root\"></div>"; then
            echo "Dashboard app is serving correctly on port $PORT"
          else
            echo "Dashboard app is not serving expected content"
            echo "Response received:"
            echo "$RESPONSE" | head -100
            kill $SERVER_PID 2>/dev/null || true
            exit 1
          fi

          # Clean up
          kill $SERVER_PID 2>/dev/null || true
          rm -f dashboard.log
          echo "Dashboard production test completed successfully"
