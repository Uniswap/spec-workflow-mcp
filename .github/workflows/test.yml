name: Test and Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.13.1]

    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Check types
        run: npx tsc --noEmit

      - name: Test dashboard production build
        run: |
          # Verify the dashboard was built correctly
          if [ ! -d "dist/dashboard" ]; then
            echo "Dashboard build directory not found"
            exit 1
          fi
          
          # Check for essential dashboard files
          if [ ! -f "dist/dashboard/index.html" ]; then
            echo "Dashboard index.html not found"
            exit 1
          fi
          
          # Check that the index.html has the expected structure
          if ! grep -q '<div id="root"></div>' dist/dashboard/index.html; then
            echo "Dashboard index.html missing root div"
            exit 1
          fi
          
          # Check for built assets
          if [ -z "$(ls -A dist/dashboard/assets 2>/dev/null)" ]; then
            echo "Dashboard assets directory is empty or missing"
            exit 1
          fi
          
          # Use Python's built-in HTTP server to test serving the dashboard
          cd dist/dashboard
          python3 -m http.server 8080 &
          SERVER_PID=$!
          cd ../..
          
          # Wait a moment for the server to start
          sleep 2
          
          # Test that the dashboard is accessible
          echo "Testing dashboard accessibility..."
          RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/)
          
          if [ "$RESPONSE_CODE" = "200" ]; then
            echo "Dashboard is serving correctly (HTTP 200)"
            
            # Verify content
            RESPONSE=$(curl -s http://localhost:8080/)
            if echo "$RESPONSE" | grep -q '<div id="root"></div>'; then
              echo "Dashboard HTML structure verified"
            else
              echo "Dashboard HTML structure incorrect"
              kill $SERVER_PID 2>/dev/null || true
              exit 1
            fi
          else
            echo "Dashboard failed to serve (HTTP $RESPONSE_CODE)"
            kill $SERVER_PID 2>/dev/null || true
            exit 1
          fi
          
          # Clean up
          kill $SERVER_PID 2>/dev/null || true
          echo "Dashboard production test completed successfully"
